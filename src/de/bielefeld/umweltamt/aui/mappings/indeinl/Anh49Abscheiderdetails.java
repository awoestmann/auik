/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.indeinl;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import java.util.Date;
import java.util.List;

/**
 * A class that represents a row in the Anh49Abscheiderdetails database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class Anh49Abscheiderdetails  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forAnh49Abscheiderdetails;

    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private Anh49Fachdaten anh49Fachdaten;
    private Integer abscheidernr;
    private Integer von;
    private String hersteller;
    private String lage;
    private String typ;
    private String bemerkung;
    private Integer nenngroesse;
    private Boolean rueckhalt;
    private Boolean kreis;
    private Boolean schlammfang;
    private Boolean vorschlamm;
    private Boolean probe;
    private Boolean benzinabscheider;
    private Boolean koaabscheider;
    private Boolean kompakt;
    private Boolean emulsionsspaltanlage;
    private Boolean schwimmer;
    private Boolean warnanlage;
    private Integer vsf2;
    private Integer vsf1;
    private boolean enabled;
    private boolean deleted;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public Anh49Abscheiderdetails() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public Anh49Abscheiderdetails(
        boolean enabled, boolean deleted) {
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /** Full constructor */
    public Anh49Abscheiderdetails(
        Anh49Fachdaten anh49Fachdaten, Integer abscheidernr, Integer von, String lage, Integer nenngroesse, Boolean rueckhalt, Boolean kreis, Boolean waschplatzHalle, Boolean kfzBetrieb, Boolean lebensmittelbetrieb, Boolean wohnhaus, Boolean oberflaechenentwaesserung, Boolean produktionsabwasser, Boolean schlammfang, Boolean vorschlamm, Boolean probe, Boolean benzinabscheider, Boolean koaabscheider, Boolean kompakt, Boolean emulsionsspaltanlage, Boolean fettabscheider, String baujahr, Boolean din1999, String bauartzulassungsnummer, Integer vsf2, Integer vsf1, Integer ngBa, Integer ngKa, Boolean schwimmer, Boolean warnsignal, Boolean wartungsvertrag, String vertragspartner, String letzteWartung, String letzteLeerung, String hersteller, String typ, Boolean schmutzwasserkanal, Boolean regenwasserkanal, Boolean mischwasserkanal, Boolean direkteinleiter, String entsorgungnachweis, String entsorgungsvertrag, String entsorgungsintervalle, Integer flaeche, String bemerkung, Date entsorgungsnachweis, String entsorgungsnachweisDurch, boolean enabled, boolean deleted) {
        this.anh49Fachdaten = anh49Fachdaten;
        this.abscheidernr = abscheidernr;
        this.von = von;
        this.lage = lage;
        this.nenngroesse = nenngroesse;
        this.rueckhalt = rueckhalt;
        this.kreis = kreis;
        this.schlammfang = schlammfang;
        this.vorschlamm = vorschlamm;
        this.probe = probe;
        this.benzinabscheider = benzinabscheider;
        this.koaabscheider = koaabscheider;
        this.kompakt = kompakt;
        this.emulsionsspaltanlage = emulsionsspaltanlage;
        this.vsf2 = vsf2;
        this.vsf1 = vsf1;
        this.schwimmer = schwimmer;
        this.warnanlage = warnanlage;
        this.hersteller = hersteller;
        this.typ = typ;
        this.bemerkung = bemerkung;
        this.enabled = enabled;
        this.deleted = deleted;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Anh49Fachdaten getAnh49Fachdaten() {
        return this.anh49Fachdaten;
    }

    public void setAnh49Fachdaten(Anh49Fachdaten anh49Fachdaten) {
        this.anh49Fachdaten = anh49Fachdaten;
    }

    public Integer getAbscheidernr() {
        return this.abscheidernr;
    }

    public void setAbscheidernr(Integer abscheidernr) {
        this.abscheidernr = abscheidernr;
    }

    public Integer getVon() {
        return this.von;
    }

    public void setVon(Integer von) {
        this.von = von;
    }

    public String getLage() {
        return this.lage;
    }

    public void setLage(String lage) {
        this.lage = lage;
    }

    public Integer getNenngroesse() {
        return this.nenngroesse;
    }

    public void setNenngroesse(Integer nenngroesse) {
        this.nenngroesse = nenngroesse;
    }

    public Boolean getRueckhalt() {
        return this.rueckhalt;
    }

    public void setRueckhalt(Boolean rueckhalt) {
        this.rueckhalt = rueckhalt;
    }

    public Boolean getKreis() {
        return this.kreis;
    }

    public void setKreis(Boolean kreis) {
        this.kreis = kreis;
    }

     public Boolean getSchlammfang() {
        return this.schlammfang;
    }

    public void setSchlammfang(Boolean schlammfang) {
        this.schlammfang = schlammfang;
    }

    public Boolean getVorschlamm() {
        return this.vorschlamm;
    }

    public void setVorschlamm(Boolean vorschlamm) {
        this.vorschlamm = vorschlamm;

    }

    public Boolean getProbe() {
        return this.probe;
    }

    public void setProbe(Boolean probe) {
        this.probe = probe;
    }
    public Boolean getBenzinabscheider() {
        return this.benzinabscheider;
    }

    public void setBenzinabscheider(Boolean benzinabscheider) {
        this.benzinabscheider = benzinabscheider;
    }

    public Boolean getKoaabscheider() {
        return this.koaabscheider;
    }

    public void setKoaabscheider(Boolean koaabscheider) {
        this.koaabscheider = koaabscheider;
    }

    public Boolean getKompakt() {
        return this.kompakt;
    }

    public void setKompakt(Boolean kompakt) {
        this.kompakt = kompakt;
    }

    public Boolean getEmulsionsspaltanlage() {
        return this.emulsionsspaltanlage;
    }

    public void setEmulsionsspaltanlage(Boolean emulsionsspaltanlage) {
        this.emulsionsspaltanlage = emulsionsspaltanlage;
    }

    public Integer getVsf2() {
        return this.vsf2;
    }

    public void setVsf2(Integer vsf2) {
       this.vsf2 = vsf2;

    }
    public Integer getVsf1() {
        return this.vsf1;
    }

    public void setVsf1(Integer vsf1) {
        this.vsf1 = vsf1;
    }

    public Boolean getSchwimmer() {
        return this.schwimmer;
    }

    public void setSchwimmer(Boolean schwimmer) {
        this.schwimmer = schwimmer;
    }

    public Boolean getWarnanlage() {
        return this.warnanlage;
    }

    public void setWarnanlage(Boolean warnanlage) {
        this.warnanlage = warnanlage;
    }


    public String getHersteller() {
        return this.hersteller;
    }

    public void setHersteller(String hersteller) {
        this.hersteller = hersteller;
    }

    public String getTyp() {
        return this.typ;
    }

    public void setTyp(String typ) {
        this.typ = typ;
    }
    public String getBemerkung() {
        return this.bemerkung;
    }

    public void setBemerkung(String bemerkung) {
        this.bemerkung = bemerkung;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this);
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();

        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("anh49Fachdaten").append("='").append(getAnh49Fachdaten()).append("' ");
        buffer.append("abscheidernr").append("='").append(getAbscheidernr()).append("' ");
        buffer.append("von").append("='").append(getVon()).append("' ");
        buffer.append("lage").append("='").append(getLage()).append("' ");
        buffer.append("nenngroesse").append("='").append(getNenngroesse()).append("' ");
        buffer.append("rueckhalt").append("='").append(getRueckhalt()).append("' ");
        buffer.append("kreis").append("='").append(getKreis()).append("' ");
        buffer.append("schlammfang").append("='").append(getSchlammfang()).append("' ");
        buffer.append("vorschlamm").append("='").append(getVorschlamm()).append("' ");
        buffer.append("probe").append("='").append(getProbe()).append("' ");
        buffer.append("benzinabscheider").append("='").append(getBenzinabscheider()).append("' ");
        buffer.append("koaabscheider").append("='").append(getKoaabscheider()).append("' ");
        buffer.append("kompakt").append("='").append(getKompakt()).append("' ");
        buffer.append("emulsionsspaltanlage").append("='").append(getEmulsionsspaltanlage()).append("' ");
        buffer.append("vsf2").append("='").append(getVsf2()).append("' ");
        buffer.append("vsf1").append("='").append(getVsf1()).append("' ");
        buffer.append("schwimmer").append("='").append(getSchwimmer()).append("' ");
        buffer.append("warnanlage").append("='").append(getWarnanlage()).append("' ");
        buffer.append("hersteller").append("='").append(getHersteller()).append("' ");
        buffer.append("typ").append("='").append(getTyp()).append("' ");
        buffer.append("bemerkung").append("='").append(getBemerkung()).append("' ");
        buffer.append("enabled").append("='").append(isEnabled()).append("' ");
        buffer.append("deleted").append("='").append(isDeleted()).append("' ");
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof Anh49Abscheiderdetails)) return false;
        return (this.getId().equals(
            ((Anh49Abscheiderdetails) other).getId()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getId() == null ?
            0 : this.getId().hashCode();
        result = result * 37 + idValue;
        return result;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>Anh49Abscheiderdetails</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static Anh49Abscheiderdetails merge(Anh49Abscheiderdetails detachedInstance) {
        log.debug("Merging Anh49Abscheiderdetails instance " + detachedInstance);
        return (Anh49Abscheiderdetails) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        Anh49Abscheiderdetails saved = Anh49Abscheiderdetails.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this Anh49Abscheiderdetails with its new values.<br>
     * This is meant to be used after merging!
     * @param copy Anh49Abscheiderdetails
     */
    private void copy(Anh49Abscheiderdetails copy) {
        this.id = copy.getId();
        this.anh49Fachdaten = copy.getAnh49Fachdaten();
        this.abscheidernr = copy.getAbscheidernr();
        this.von = copy.getVon();
        this.lage = copy.getLage();
        this.nenngroesse = copy.getNenngroesse();
        this.rueckhalt = copy.getRueckhalt();
        this.kreis= copy.getKreis();
        this.schlammfang = copy.getSchlammfang();
        this.vorschlamm = copy.getVorschlamm();
        this.probe = copy.getProbe();
        this.benzinabscheider = copy.getBenzinabscheider();
        this.koaabscheider = copy.getKoaabscheider();
        this.kompakt = copy.getKompakt();
        this.emulsionsspaltanlage = copy.getEmulsionsspaltanlage();
        this.vsf2 = copy.getVsf2();
        this.vsf1 = copy.getVsf1();
        this.schwimmer = copy.getSchwimmer();
        this.warnanlage = copy.getWarnanlage();
        this.hersteller = copy.getHersteller();
        this.typ = copy.getTyp();
        this.bemerkung = copy.getBemerkung();
        this.enabled = copy.isEnabled();
        this.deleted = copy.isDeleted();
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(Anh49Abscheiderdetails detachedInstance) {
        log.debug("Deleting Anh49Abscheiderdetails instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return Anh49Abscheiderdetails.delete(this);
    }

    /**
     * Find an <code>Anh49Abscheiderdetails</code> instance by its primary key
     * @param id the primary key value
     * @return <code>Anh49Abscheiderdetails</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static Anh49Abscheiderdetails findById(java.lang.Integer id) {
        log.debug("Getting Anh49Abscheiderdetails instance with id: " + id);
        return (Anh49Abscheiderdetails)
            new DatabaseAccess().get(Anh49Abscheiderdetails.class, id);
    }

    /**
     * Get a list of all <code>Anh49Abscheiderdetails</code>
     * @return <code>List&lt;Anh49Abscheiderdetails&gt;</code>
     *         all <code>Anh49Abscheiderdetails</code>
     */
    public static List<Anh49Abscheiderdetails> getAll() {
        return DatabaseQuery.getAll(new Anh49Abscheiderdetails());
    }


		// TODO Auto-generated method stub

	}

    /* Custom code goes below here! */


