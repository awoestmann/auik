/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.oberflgw;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * A class that represents a row in the Massnahme database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class Massnahme  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forMassnahme;

    /* Primary key, foreign keys (relations) and table columns */
    private Integer nr;
    private Integer origNr;
    private Long stoffNr;
    private Long gruppeNr;
    private String massnahmeStoff;
    private Date stoffEintragsDat;
    private String ergebnisMassnahme;
    private Date ergebnisAm;
    private Date erstellDat;
    private Date aktualDat;
    private String externalNr;
    private Set<ZBetriebMassnahme> ZBetriebMassnahmes = new HashSet<ZBetriebMassnahme>(0);

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public Massnahme() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public Massnahme(
        Integer nr, Date erstellDat, Date aktualDat) {
        this.nr = nr;
        this.erstellDat = erstellDat;
        this.aktualDat = aktualDat;
    }

    /** Full constructor */
    public Massnahme(
        Integer nr, Long stoffNr, Long gruppeNr, String massnahmeStoff, Date stoffEintragsDat, String ergebnisMassnahme, Date ergebnisAm, Date erstellDat, Date aktualDat, String externalNr, Set<ZBetriebMassnahme> ZBetriebMassnahmes) {
        this.nr = nr;
        this.stoffNr = stoffNr;
        this.gruppeNr = gruppeNr;
        this.massnahmeStoff = massnahmeStoff;
        this.stoffEintragsDat = stoffEintragsDat;
        this.ergebnisMassnahme = ergebnisMassnahme;
        this.ergebnisAm = ergebnisAm;
        this.erstellDat = erstellDat;
        this.aktualDat = aktualDat;
        this.externalNr = externalNr;
        this.ZBetriebMassnahmes = ZBetriebMassnahmes;
    }

    /* Setter and getter methods */
    public Integer getNr() {
        return this.nr;
    }

    public void setNr(Integer nr) {
        this.nr = nr;
    }

    public Long getStoffNr() {
        return this.stoffNr;
    }

    public void setStoffNr(Long stoffNr) {
        this.stoffNr = stoffNr;
    }

    public Long getGruppeNr() {
        return this.gruppeNr;
    }

    public void setGruppeNr(Long gruppeNr) {
        this.gruppeNr = gruppeNr;
    }

    public String getMassnahmeStoff() {
        return this.massnahmeStoff;
    }

    public void setMassnahmeStoff(String massnahmeStoff) {
        this.massnahmeStoff = massnahmeStoff;
    }

    public Date getStoffEintragsDat() {
        return this.stoffEintragsDat;
    }

    public void setStoffEintragsDat(Date stoffEintragsDat) {
        this.stoffEintragsDat = stoffEintragsDat;
    }

    public String getErgebnisMassnahme() {
        return this.ergebnisMassnahme;
    }

    public void setErgebnisMassnahme(String ergebnisMassnahme) {
        this.ergebnisMassnahme = ergebnisMassnahme;
    }

    public Date getErgebnisAm() {
        return this.ergebnisAm;
    }

    public void setErgebnisAm(Date ergebnisAm) {
        this.ergebnisAm = ergebnisAm;
    }

    public Date getErstellDat() {
        return this.erstellDat;
    }

    public void setErstellDat(Date erstellDat) {
        this.erstellDat = erstellDat;
    }

    public Date getAktualDat() {
        return this.aktualDat;
    }

    public void setAktualDat(Date aktualDat) {
        this.aktualDat = aktualDat;
    }

    @JsonIgnore
    public String getExternalNr() {
        return this.externalNr;
    }

    public void setExternalNr(String externalNr) {
        this.externalNr = externalNr;
    }

    @JsonIgnore
    public Set<ZBetriebMassnahme> getZBetriebMassnahmes() {
        return this.ZBetriebMassnahmes;
    }

    public void setZBetriebMassnahmes(Set<ZBetriebMassnahme> ZBetriebMassnahmes) {
        this.ZBetriebMassnahmes = ZBetriebMassnahmes;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this);
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();

        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("nr").append("='").append(getNr()).append("' ");
        buffer.append("stoffNr").append("='").append(getStoffNr()).append("' ");
        buffer.append("gruppeNr").append("='").append(getGruppeNr()).append("' ");
        buffer.append("massnahmeStoff").append("='").append(getMassnahmeStoff()).append("' ");
        buffer.append("stoffEintragsDat").append("='").append(getStoffEintragsDat()).append("' ");
        buffer.append("ergebnisMassnahme").append("='").append(getErgebnisMassnahme()).append("' ");
        buffer.append("ergebnisAm").append("='").append(getErgebnisAm()).append("' ");
        buffer.append("erstellDat").append("='").append(getErstellDat()).append("' ");
        buffer.append("aktualDat").append("='").append(getAktualDat()).append("' ");
        buffer.append("externalNr").append("='").append(getExternalNr()).append("' ");
        buffer.append("ZBetriebMassnahmes").append("='").append(getZBetriebMassnahmes()).append("' ");
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof Massnahme)) return false;
        return (this.getNr().equals(
            ((Massnahme) other).getNr()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getNr() == null ?
            0 : this.getNr().hashCode();
        result = result * 37 + idValue;
        return result;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>Massnahme</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static Massnahme merge(Massnahme detachedInstance) {
        log.debug("Merging Massnahme instance " + detachedInstance);
        return (Massnahme) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        Massnahme saved = Massnahme.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this Massnahme with its new values.<br>
     * This is meant to be used after merging!
     * @param copy Massnahme
     */
    private void copy(Massnahme copy) {
        this.nr = copy.getNr();
        this.stoffNr = copy.getStoffNr();
        this.gruppeNr = copy.getGruppeNr();
        this.massnahmeStoff = copy.getMassnahmeStoff();
        this.stoffEintragsDat = copy.getStoffEintragsDat();
        this.ergebnisMassnahme = copy.getErgebnisMassnahme();
        this.ergebnisAm = copy.getErgebnisAm();
        this.erstellDat = copy.getErstellDat();
        this.aktualDat = copy.getAktualDat();
        this.externalNr = copy.getExternalNr();
        this.ZBetriebMassnahmes = copy.getZBetriebMassnahmes();
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(Massnahme detachedInstance) {
        log.debug("Deleting Massnahme instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return Massnahme.delete(this);
    }

    /**
     * Find an <code>Massnahme</code> instance by its primary key
     * @param id the primary key value
     * @return <code>Massnahme</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static Massnahme findById(long id) {
        log.debug("Getting Massnahme instance with id: " + id);
        return (Massnahme)
            new DatabaseAccess().get(Massnahme.class, id);
    }

    /**
     * Get a list of all <code>Massnahme</code>
     * @return <code>List&lt;Massnahme&gt;</code>
     *         all <code>Massnahme</code>
     */
    public static List<Massnahme> getAll() {
        return DatabaseQuery.getAll(new Massnahme());
    }

    /* Custom code goes below here! */

    public void setOrigNr(Integer origNr) {
        this.origNr = origNr;
    }

    @JsonIgnore
    public Integer getOrigNr() {
        return this.origNr;
    }

}
