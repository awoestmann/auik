/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.oberflgw;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.elka.Einleitungsstelle;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * A class that represents a row in the Versickerungsanlage database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class Versickerungsanlage  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forVersickerungsanlage;

    /* Primary key, foreign keys (relations) and table columns */
    private Long nr;
    private Einleitungsstelle einleitungsstelle;
    private Double flurabstand;
    private Double gelaendeVerAnlage;
    private Double abstGrGrenze;
    private Double abstUnterkGebaeude;
    private Double abstVerAnlage;
    private boolean landesfoerderungTog;
    private boolean notueberlaufTog;
    private String notueberlaufZiel;
    private Date erstellDat;
    private Double durchlaessigkeit;
    private String untergrundart;
    private Integer verAnlageOpt;
    private String sonstigesVers;
    private String bauartzulId;
    private Date aktualDat;
    private String externalNr;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public Versickerungsanlage() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public Versickerungsanlage(
        Long nr, Einleitungsstelle einleitungsstelle, boolean landesfoerderungTog, boolean notueberlaufTog, Date erstellDat, Date aktualDat, String herkunft) {
        this.nr = nr;
        this.einleitungsstelle = einleitungsstelle;
        this.landesfoerderungTog = landesfoerderungTog;
        this.notueberlaufTog = notueberlaufTog;
        this.erstellDat = erstellDat;
        this.aktualDat = aktualDat;

    }

    /** Full constructor */
    public Versickerungsanlage(
        Long nr, Einleitungsstelle einleitungsstelle, Double flurabstand, Double gelaendeVerAnlage, Double abstGrGrenze, Double abstUnterkGebaeude, Double abstVerAnlage, boolean landesfoerderungTog, boolean notueberlaufTog, String notueberlaufZiel, Date erstellDat, Double durchlaessigkeit, String untergrundart, Integer verAnlageOpt, String sonstigesVers, String bauartzulId, Date aktualDat,  String externalNr) {
        this.nr = nr;
        this.einleitungsstelle = einleitungsstelle;
        this.flurabstand = flurabstand;
        this.gelaendeVerAnlage = gelaendeVerAnlage;
        this.abstGrGrenze = abstGrGrenze;
        this.abstUnterkGebaeude = abstUnterkGebaeude;
        this.abstVerAnlage = abstVerAnlage;
        this.landesfoerderungTog = landesfoerderungTog;
        this.notueberlaufTog = notueberlaufTog;
        this.notueberlaufZiel = notueberlaufZiel;
        this.erstellDat = erstellDat;
        this.durchlaessigkeit = durchlaessigkeit;
        this.untergrundart = untergrundart;
        this.verAnlageOpt = verAnlageOpt;
        this.sonstigesVers = sonstigesVers;
        this.bauartzulId = bauartzulId;
        this.aktualDat = aktualDat;

        this.externalNr = externalNr;
    }

    /* Setter and getter methods */
    public Long getNr() {
        return this.nr;
    }

    public void setNr(long nr) {
        this.nr = nr;
    }

    public Einleitungsstelle getEinleitungsstelle() {
        return this.einleitungsstelle;
    }

    public void setEinleitungsstelle(Einleitungsstelle einleitungsstelle) {
        this.einleitungsstelle = einleitungsstelle;
    }

    public Double getFlurabstand() {
        return this.flurabstand;
    }

    public void setFlurabstand(Double flurabstand2) {
        this.flurabstand = flurabstand2;
    }

    public Double getGelaendeVerAnlage() {
        return this.gelaendeVerAnlage;
    }

    public void setGelaendeVerAnlage(Double gelaendeVerAnlage2) {
        this.gelaendeVerAnlage = gelaendeVerAnlage2;
    }

    public Double getAbstGrGrenze() {
        return this.abstGrGrenze;
    }

    public void setAbstGrGrenze(Double abstGrGrenze2) {
        this.abstGrGrenze = abstGrGrenze2;
    }

    public Double getAbstUnterkGebaeude() {
        return this.abstUnterkGebaeude;
    }

    public void setAbstUnterkGebaeude(Double abstUnterkGebaeude2) {
        this.abstUnterkGebaeude = abstUnterkGebaeude2;
    }

    public Double getAbstVerAnlage() {
        return this.abstVerAnlage;
    }

    public void setAbstVerAnlage(Double abstVerAnlage2) {
        this.abstVerAnlage = abstVerAnlage2;
    }

    public Boolean isLandesfoerderungTog() {
        return this.landesfoerderungTog;
    }

    public void setLandesfoerderungTog(boolean landesfoerderungTog) {
        this.landesfoerderungTog = landesfoerderungTog;
    }

    public Boolean isNotueberlaufTog() {
        return this.notueberlaufTog;
    }

    public void setNotueberlaufTog(boolean notueberlaufTog) {
        this.notueberlaufTog = notueberlaufTog;
    }

    public String getNotueberlaufZiel() {
        return this.notueberlaufZiel;
    }

    public void setNotueberlaufZiel(String notueberlaufZiel) {
        this.notueberlaufZiel = notueberlaufZiel;
    }

    public Date getErstellDat() {
        return this.erstellDat;
    }

    public void setErstellDat(Date erstellDat) {
        this.erstellDat = erstellDat;
    }

    public Double getDurchlaessigkeit() {
        return this.durchlaessigkeit;
    }

    public void setDurchlaessigkeit(Double durchlaessigkeit2) {
        this.durchlaessigkeit = durchlaessigkeit2;
    }

    public String getUntergrundart() {
        return this.untergrundart;
    }

    public void setUntergrundart(String untergrundart) {
        this.untergrundart = untergrundart;
    }

    public Integer getVerAnlageOpt() {
        return this.verAnlageOpt;
    }

    public void setVerAnlageOpt(Integer verAnlageOpt) {
        this.verAnlageOpt = verAnlageOpt;
    }

    public String getSonstigesVers() {
        return this.sonstigesVers;
    }

    public void setSonstigesVers(String sonstigesVers) {
        this.sonstigesVers = sonstigesVers;
    }

    public String getBauartzulId() {
        return this.bauartzulId;
    }

    public void setBauartzulId(String bauartzulId) {
        this.bauartzulId = bauartzulId;
    }

    public Date getAktualDat() {
        return this.aktualDat;
    }

    public void setAktualDat(Date aktualDat) {
        this.aktualDat = aktualDat;
    }

    public String getExternalNr() {
        return this.externalNr;
    }

    public void setExternalNr(String externalNr) {
        this.externalNr = externalNr;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this);
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();

        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("nr").append("='").append(getNr()).append("' ");
        buffer.append("einleitungsstelle").append("='").append(getEinleitungsstelle()).append("' ");
        buffer.append("flurabstand").append("='").append(getFlurabstand()).append("' ");
        buffer.append("gelaendeVerAnlage").append("='").append(getGelaendeVerAnlage()).append("' ");
        buffer.append("abstGrGrenze").append("='").append(getAbstGrGrenze()).append("' ");
        buffer.append("abstUnterkGebaeude").append("='").append(getAbstUnterkGebaeude()).append("' ");
        buffer.append("abstVerAnlage").append("='").append(getAbstVerAnlage()).append("' ");
        buffer.append("landesfoerderungTog").append("='").append(isLandesfoerderungTog()).append("' ");
        buffer.append("notueberlaufTog").append("='").append(isNotueberlaufTog()).append("' ");
        buffer.append("notueberlaufZiel").append("='").append(getNotueberlaufZiel()).append("' ");
        buffer.append("erstellDat").append("='").append(getErstellDat()).append("' ");
        buffer.append("durchlaessigkeit").append("='").append(getDurchlaessigkeit()).append("' ");
        buffer.append("untergrundart").append("='").append(getUntergrundart()).append("' ");
        buffer.append("verAnlageOpt").append("='").append(getVerAnlageOpt()).append("' ");
        buffer.append("sonstigesVers").append("='").append(getSonstigesVers()).append("' ");
        buffer.append("bauartzulId").append("='").append(getBauartzulId()).append("' ");
        buffer.append("aktualDat").append("='").append(getAktualDat()).append("' ");
        buffer.append("externalNr").append("='").append(getExternalNr()).append("' ");
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof Versickerungsanlage)) return false;
        return (this.getNr().equals(
            ((Versickerungsanlage) other).getNr()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getNr() == null ?
            0 : this.getNr().hashCode();
        result = result * 37 + idValue;
        return result;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>Versickerungsanlage</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static Versickerungsanlage merge(Versickerungsanlage detachedInstance) {
        log.debug("Merging Versickerungsanlage instance " + detachedInstance);
        return (Versickerungsanlage) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        Versickerungsanlage saved = Versickerungsanlage.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this Versickerungsanlage with its new values.<br>
     * This is meant to be used after merging!
     * @param copy Versickerungsanlage
     */
    private void copy(Versickerungsanlage copy) {
        this.nr = copy.getNr();
        this.einleitungsstelle = copy.getEinleitungsstelle();
        this.flurabstand = copy.getFlurabstand();
        this.gelaendeVerAnlage = copy.getGelaendeVerAnlage();
        this.abstGrGrenze = copy.getAbstGrGrenze();
        this.abstUnterkGebaeude = copy.getAbstUnterkGebaeude();
        this.abstVerAnlage = copy.getAbstVerAnlage();
        this.landesfoerderungTog = copy.isLandesfoerderungTog();
        this.notueberlaufTog = copy.isNotueberlaufTog();
        this.notueberlaufZiel = copy.getNotueberlaufZiel();
        this.erstellDat = copy.getErstellDat();
        this.durchlaessigkeit = copy.getDurchlaessigkeit();
        this.untergrundart = copy.getUntergrundart();
        this.verAnlageOpt = copy.getVerAnlageOpt();
        this.sonstigesVers = copy.getSonstigesVers();
        this.bauartzulId = copy.getBauartzulId();
        this.aktualDat = copy.getAktualDat();
        this.externalNr = copy.getExternalNr();
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(Versickerungsanlage detachedInstance) {
        log.debug("Deleting Versickerungsanlage instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return Versickerungsanlage.delete(this);
    }

    /**
     * Find an <code>Versickerungsanlage</code> instance by its primary key
     * @param id the primary key value
     * @return <code>Versickerungsanlage</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static Versickerungsanlage findById(long id) {
        log.debug("Getting Versickerungsanlage instance with id: " + id);
        return (Versickerungsanlage)
            new DatabaseAccess().get(Versickerungsanlage.class, id);
    }

    /**
     * Get a list of all <code>Versickerungsanlage</code>
     * @return <code>List&lt;Versickerungsanlage&gt;</code>
     *         all <code>Versickerungsanlage</code>
     */
    public static List<Versickerungsanlage> getAll() {
        return DatabaseQuery.getAll(new Versickerungsanlage());
    }

    /* Custom code goes below here! */

}
