/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.oberflgw;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.elka.Anfallstelle;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * A class that represents a row in the AfsStoffe database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class AfsStoffe  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forAfsStoffe;
    
    /* Primary key, foreign keys (relations) and table columns */
    private Integer anfallstellenNr;
    private Integer origNr;
    private Anfallstelle anfallstelle;
    private String produkt;
    private Integer stoffNr;

    private Integer origAnfallstellenNr;

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public AfsStoffe() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public AfsStoffe(
        Integer id, Anfallstelle anfallstelle) {
        this.anfallstellenNr = id;
        this.anfallstelle = anfallstelle;
    }

    /** Full constructor */
    public AfsStoffe(
        Integer id, Anfallstelle anfallstelle, String produkt, Integer stoffNr) {
        this.anfallstellenNr = id;
        this.anfallstelle = anfallstelle;
        this.produkt = produkt;
        this.stoffNr = stoffNr;
    }

    /* Setter and getter methods */
    public Integer getAnfallstellenNr() {
        return this.anfallstellenNr;
    }

    public void setAnfallstellenNr(Integer id) {
        this.anfallstellenNr = id;
    }

    @JsonBackReference
    public Anfallstelle getAnfallstelle() {
        return this.anfallstelle;
    }

    public void setAnfallstelle(Anfallstelle anfallstelle) {
        this.anfallstelle = anfallstelle;
    }

    public String getProdukt() {
        return this.produkt;
    }

    public void setProdukt(String produkt) {
        this.produkt = produkt;
    }

    public Integer getStoffNr() {
        return this.stoffNr;
    }

    public void setStoffNr(Integer stoffNr) {
        this.stoffNr = stoffNr;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this); 
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("id").append("='").append(getAnfallstellenNr()).append("' ");			
        buffer.append("anfallstelle").append("='").append(getAnfallstelle()).append("' ");			
        buffer.append("produkt").append("='").append(getProdukt()).append("' ");			
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof AfsStoffe)) return false;
        return (this.getAnfallstellenNr().equals(
            ((AfsStoffe) other).getAnfallstellenNr()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getAnfallstellenNr() == null ?
            0 : this.getAnfallstellenNr().hashCode();
        result = result * 37 + idValue;
        return result;
    }
    
    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>AfsStoffe</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static AfsStoffe merge(AfsStoffe detachedInstance) {
        log.debug("Merging AfsStoffe instance " + detachedInstance);
        return (AfsStoffe) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        AfsStoffe saved = AfsStoffe.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this AfsStoffe with its new values.<br>
     * This is meant to be used after merging!
     * @param copy AfsStoffe
     */
    private void copy(AfsStoffe copy) {
        this.anfallstellenNr = copy.getAnfallstellenNr();            
        this.anfallstelle = copy.getAnfallstelle();            
        this.produkt = copy.getProdukt();            
    }    

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(AfsStoffe detachedInstance) {
        log.debug("Deleting AfsStoffe instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return AfsStoffe.delete(this);
    }

    /**
     * Find an <code>AfsStoffe</code> instance by its primary key
     * @param id the primary key value
     * @return <code>AfsStoffe</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static AfsStoffe findById(Integer id) {
        log.debug("Getting AfsStoffe instance with id: " + id);
        return (AfsStoffe)
            new DatabaseAccess().get(AfsStoffe.class, id);
    }

    /**
     * Get a list of all <code>AfsStoffe</code>
     * @return <code>List&lt;AfsStoffe&gt;</code>
     *         all <code>AfsStoffe</code>
     */
    public static List<AfsStoffe> getAll() {
        return DatabaseQuery.getAll(new AfsStoffe());
    }

    /* Custom code goes below here! */

    public void setOrigAnfallstellenNr(Integer origAnfallstellenNr) {
        this.origAnfallstellenNr = origAnfallstellenNr;
    }

    @JsonIgnore
    public Integer getOrigAnfallstellenNr() {
        return this.origAnfallstellenNr;
    }

}
