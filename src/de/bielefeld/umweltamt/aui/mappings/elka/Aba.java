/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 5.0.0.Final

package de.bielefeld.umweltamt.aui.mappings.elka;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import de.bielefeld.umweltamt.aui.HibernateSessionFactory;
import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;
import de.bielefeld.umweltamt.aui.mappings.basis.Objekt;
import de.bielefeld.umweltamt.aui.utils.AuikLogger;

/**
 * A class that represents a row in the Aba database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class Aba  implements java.io.Serializable {

    /** Generated serialVersionUID for Serializable interface */
    private static final long serialVersionUID =
        DatabaseSerialVersionUID.forAba;

    /* Primary key, foreign keys (relations) and table columns */
    private Integer id;
    private Objekt objekt;
    private Integer ansprAdrId;
    private Date aktualDat;
    private Date erstellDat;
    private String herkunft;
    private String bezeichnung;
    private Date inbetriebDat;
    private Date stillgelegtDat;
    private Boolean genehmpflichtigToc;
    private Integer e32;
    private Integer n32;
    private Integer sonstZulOpt;
    private Integer verfahrenNr;
    private Boolean wartungsvertragToc;
    private Boolean einzelabnahmeToc;
    private Boolean enabled;
    private Boolean deleted;
    private Set<Referenz> referenzsForZAbaNr = new HashSet<Referenz>(0);
    private Set<Referenz> referenzsForQAbaNr = new HashSet<Referenz>(0);
    private Set<Wasserrecht> Wasserrechts = new HashSet<Wasserrecht>(0);
    private Set<Abaverfahren> Abaverfahrens = new HashSet<Abaverfahren>(0);

    /** Logging */
    private static final AuikLogger log = AuikLogger.getLogger();

    /** Default constructor */
    public Aba() {
        // This place is intentionally left blank.
    }

    /** Minimal constructor */
    public Aba(
        Integer id) {
        this.id = id;
    }

    /** Full constructor */
    public Aba(
        Integer id, Integer objektid, Integer ansprAdrId, Date aktualDat, Date erstellDat, String herkunft, String bezeichnung, Date inbetriebDat, Date stillgelegtDat, Boolean genehmpflichtigToc, Integer e32, Integer n32, Integer sonstZulOpt, Integer verfahrenNr, Boolean wartungsvertragToc, Boolean einzelabnahmeToc, Boolean enabled, Boolean deleted, Set<Wasserrecht> Wasserrechts, Set<Referenz> referenzsForZAbaNr, Set<Abaverfahren> Abaverfahrens, Set<Referenz> referenzsForQAbaNr) {
        this.id = id;
        this.ansprAdrId = ansprAdrId;
        this.aktualDat = aktualDat;
        this.erstellDat = erstellDat;
        this.herkunft = herkunft;
        this.bezeichnung = bezeichnung;
        this.inbetriebDat = inbetriebDat;
        this.stillgelegtDat = stillgelegtDat;
        this.genehmpflichtigToc = genehmpflichtigToc;
        this.e32 = e32;
        this.n32 = n32;
        this.sonstZulOpt = sonstZulOpt;
        this.verfahrenNr = verfahrenNr;
        this.wartungsvertragToc = wartungsvertragToc;
        this.einzelabnahmeToc = einzelabnahmeToc;
        this.enabled = enabled;
        this.deleted = deleted;
        this.Wasserrechts = Wasserrechts;
        this.referenzsForZAbaNr = referenzsForZAbaNr;
        this.Abaverfahrens = Abaverfahrens;
        this.referenzsForQAbaNr = referenzsForQAbaNr;
    }

    /* Setter and getter methods */
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Objekt getObjekt() {
	    return this.objekt;
	}

	public void setObjekt(Objekt objekt) {
	    this.objekt = objekt;
	}

	public Integer getAnsprAdrId() {
        return this.ansprAdrId;
    }

    public void setAnsprAdrId(Integer ansprAdrId) {
        this.ansprAdrId = ansprAdrId;
    }

    public Date getAktualDat() {
        return this.aktualDat;
    }

    public void setAktualDat(Date aktualDat) {
        this.aktualDat = aktualDat;
    }

    public Date getErstellDat() {
        return this.erstellDat;
    }

    public void setErstellDat(Date erstellDat) {
        this.erstellDat = erstellDat;
    }

    public String getHerkunft() {
        return this.herkunft;
    }

    public void setHerkunft(String herkunft) {
        this.herkunft = herkunft;
    }

    public String getBezeichnung() {
        return this.bezeichnung;
    }

    public void setBezeichnung(String bezeichnung) {
        this.bezeichnung = bezeichnung;
    }

    public Date getInbetriebDat() {
        return this.inbetriebDat;
    }

    public void setInbetriebDat(Date inbetriebDat) {
        this.inbetriebDat = inbetriebDat;
    }

    public Date getStillgelegtDat() {
        return this.stillgelegtDat;
    }

    public void setStillgelegtDat(Date stillgelegtDat) {
        this.stillgelegtDat = stillgelegtDat;
    }

    public Boolean getGenehmpflichtigToc() {
        return this.genehmpflichtigToc;
    }

    public void setGenehmpflichtigToc(Boolean genehmpflichtigToc) {
        this.genehmpflichtigToc = genehmpflichtigToc;
    }

    public Integer getE32() {
        return this.e32;
    }

    public void setE32(Integer e32) {
        this.e32 = e32;
    }

    public Integer getN32() {
        return this.n32;
    }

    public void setN32(Integer n32) {
        this.n32 = n32;
    }

    public Integer getSonstZulOpt() {
        return this.sonstZulOpt;
    }

    public void setSonstZulOpt(Integer sonstZulOpt) {
        this.sonstZulOpt = sonstZulOpt;
    }

    public Integer getVerfahrenNr() {
        return this.verfahrenNr;
    }

    public void setVerfahrenNr(Integer verfahrenNr) {
        this.verfahrenNr = verfahrenNr;
    }

    public Boolean getWartungsvertragToc() {
        return this.wartungsvertragToc;
    }

    public void setWartungsvertragToc(Boolean wartungsvertragToc) {
        this.wartungsvertragToc = wartungsvertragToc;
    }

    public Boolean getEinzelabnahmeToc() {
        return this.einzelabnahmeToc;
    }

    public void setEinzelabnahmeToc(Boolean einzelabnahmeToc) {
        this.einzelabnahmeToc = einzelabnahmeToc;
    }

    public Boolean getEnabled() {
        return this.enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public Set<Wasserrecht> getWasserrechts() {
        return this.Wasserrechts;
    }

    public void setWasserrechts(Set<Wasserrecht> Wasserrechts) {
        this.Wasserrechts = Wasserrechts;
    }

    public Set<Referenz> getReferenzsForZAbaNr() {
        return this.referenzsForZAbaNr;
    }

    public void setReferenzsForZAbaNr(Set<Referenz> referenzsForZAbaNr) {
        this.referenzsForZAbaNr = referenzsForZAbaNr;
    }

    public Set<Abaverfahren> getAbaverfahrens() {
        return this.Abaverfahrens;
    }

    public void setAbaverfahrens(Set<Abaverfahren> Abaverfahrens) {
        this.Abaverfahrens = Abaverfahrens;
    }

    public Set<Referenz> getReferenzsForQAbaNr() {
        return this.referenzsForQAbaNr;
    }

    public void setReferenzsForQAbaNr(Set<Referenz> referenzsForQAbaNr) {
        this.referenzsForQAbaNr = referenzsForQAbaNr;
    }

    /**
     * To implement custom toString methods, jump to not generated code.<br>
     * Basically we either call on <code>toDebugString</code> for a debug
     * string, call on <code>toGuiString</code> for a gui representation or do
     * something completely different.
     * @return String
     */
    @Override
    public String toString() {
        return DatabaseClassToString.toStringForClass(this);
    }

    /**
     * Get a string representation for debugging
     * @return String
     */
    public String toDebugString() {
        StringBuffer buffer = new StringBuffer();

        buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
        buffer.append("id").append("='").append(getId()).append("' ");
        buffer.append("objekt").append("='").append(getObjekt()).append("' ");
        buffer.append("ansprAdrId").append("='").append(getAnsprAdrId()).append("' ");
        buffer.append("aktualDat").append("='").append(getAktualDat()).append("' ");
        buffer.append("erstellDat").append("='").append(getErstellDat()).append("' ");
        buffer.append("herkunft").append("='").append(getHerkunft()).append("' ");
        buffer.append("bezeichnung").append("='").append(getBezeichnung()).append("' ");
        buffer.append("inbetriebDat").append("='").append(getInbetriebDat()).append("' ");
        buffer.append("stillgelegtDat").append("='").append(getStillgelegtDat()).append("' ");
        buffer.append("genehmpflichtigToc").append("='").append(getGenehmpflichtigToc()).append("' ");
        buffer.append("e32").append("='").append(getE32()).append("' ");
        buffer.append("n32").append("='").append(getN32()).append("' ");
        buffer.append("sonstZulOpt").append("='").append(getSonstZulOpt()).append("' ");
        buffer.append("verfahrenNr").append("='").append(getVerfahrenNr()).append("' ");
        buffer.append("wartungsvertragToc").append("='").append(getWartungsvertragToc()).append("' ");
        buffer.append("einzelabnahmeToc").append("='").append(getEinzelabnahmeToc()).append("' ");
        buffer.append("enabled").append("='").append(getEnabled()).append("' ");
        buffer.append("deleted").append("='").append(getDeleted()).append("' ");
        buffer.append("Wasserrechts").append("='").append(getWasserrechts()).append("' ");
        buffer.append("referenzsForZAbaNr").append("='").append(getReferenzsForZAbaNr()).append("' ");
        buffer.append("Abaverfahrens").append("='").append(getAbaverfahrens()).append("' ");
        buffer.append("referenzsForQAbaNr").append("='").append(getReferenzsForQAbaNr()).append("' ");
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param other
     * @return <code>true</code>, if this and other are equal,
     *         <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null) return false;
        if (!(other instanceof Aba)) return false;
        return (this.getId().equals(
            ((Aba) other).getId()));
    }

    /**
     * Calculate a unique hashCode
     * @return <code>int</code>
     */
    @Override
    public int hashCode() {
        int result = 17;
        int idValue = this.getId() == null ?
            0 : this.getId().hashCode();
        result = result * 37 + idValue;
        return result;
    }

    /**
     * Merge (save or update) a detached instance
     * @param detachedInstance the instance to merge
     * @return <code>Aba</code> the merged instance,
     *         if everything went okay,
     *         <code>null</code> otherwise
     */
    public static Aba merge(Aba detachedInstance) {
        log.debug("Merging Aba instance " + detachedInstance);
        return (Aba) new DatabaseAccess().merge(detachedInstance);
    }

    /**
     * Merge (save or update) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean merge() {
        Aba saved = Aba.merge(this);
        if (saved == null) {
            return false;
        } else {
            this.copy(saved);
            return true;
        }
    }

    /**
     * Update this Aba with its new values.<br>
     * This is meant to be used after merging!
     * @param copy Aba
     */
    private void copy(Aba copy) {
        this.id = copy.getId();
        this.objekt = copy.getObjekt();
        this.ansprAdrId = copy.getAnsprAdrId();
        this.aktualDat = copy.getAktualDat();
        this.erstellDat = copy.getErstellDat();
        this.herkunft = copy.getHerkunft();
        this.bezeichnung = copy.getBezeichnung();
        this.inbetriebDat = copy.getInbetriebDat();
        this.stillgelegtDat = copy.getStillgelegtDat();
        this.genehmpflichtigToc = copy.getGenehmpflichtigToc();
        this.e32 = copy.getE32();
        this.n32 = copy.getN32();
        this.sonstZulOpt = copy.getSonstZulOpt();
        this.verfahrenNr = copy.getVerfahrenNr();
        this.wartungsvertragToc = copy.getWartungsvertragToc();
        this.einzelabnahmeToc = copy.getEinzelabnahmeToc();
        this.enabled = copy.getEnabled();
        this.deleted = copy.getDeleted();
        this.Wasserrechts = copy.getWasserrechts();
        this.referenzsForZAbaNr = copy.getReferenzsForZAbaNr();
        this.Abaverfahrens = copy.getAbaverfahrens();
        this.referenzsForQAbaNr = copy.getReferenzsForQAbaNr();
    }

    /**
     * Delete (mark as deleted) a detached instance
     * @param detachedInstance the instance to delete
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public static boolean delete(Aba detachedInstance) {
        log.debug("Deleting Aba instance " + detachedInstance);
        return new DatabaseAccess().delete(detachedInstance);
    }

    /**
     * Delete (mark as deleted) this instance
     * @return <code>true</code>, if everything went okay,
     *         <code>false</code> otherwise
     */
    public boolean delete() {
        return Aba.delete(this);
    }

    /**
     * Find an <code>Aba</code> instance by its primary key
     * @param id the primary key value
     * @return <code>Aba</code> the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static Aba findById(java.lang.Integer id) {
        log.debug("Getting Aba instance with id: " + id);
        return (Aba)
            new DatabaseAccess().get(Aba.class, id);
    }

    /**
     * Get a list of all <code>Aba</code>
     * @return <code>List&lt;Aba&gt;</code>
     *         all <code>Aba</code>
     */
    public static List<Aba> getAll() {
        return DatabaseQuery.getAll(new Aba());
    }

    /* Custom code goes below here! */
    public static Aba findByObjektId(java.lang.Integer id) {
        Objekt objekt = (Objekt) HibernateSessionFactory.currentSession().createQuery("from Objekt where id= " + id).list().get(0);
        Set<Aba> list = objekt.getAbas();
        return list.iterator().next();
    }

	public List<Object> getSortedVerfahren() {
		Set<Abaverfahren> items = getAbaverfahrens();
		List<Object> sortedVerfahren = items.stream().collect(Collectors.toList());
		return sortedVerfahren;

	}
}
