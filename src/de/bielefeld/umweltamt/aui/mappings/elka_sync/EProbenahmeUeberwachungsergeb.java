/**
 * Copyright 2005-2011, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */
package de.bielefeld.umweltamt.aui.mappings.elka_sync;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import de.bielefeld.umweltamt.aui.mappings.DatabaseAccess;
import de.bielefeld.umweltamt.aui.mappings.DatabaseQuery;

// Generated 22.10.2015 16:17:13 by Hibernate Tools 3.4.0.CR1

/**
 * EProbenahmeUeberwachungsergeb generated by hbm2java
 */
public class EProbenahmeUeberwachungsergeb implements java.io.Serializable {

	private Integer nr;
	private Integer origNr;
	private Integer stoffNr;
	private String gruppeDevId;
	private String regelwerkId;
	private String variantenId;
	private Integer trennNrOpt;
	private Integer messergebnisTextOpt;
	private Float messergebnis;
	private Integer masseinheitenNr;

	public EProbenahmeUeberwachungsergeb() {
	}

	public EProbenahmeUeberwachungsergeb(Integer nr) {
		this.nr = nr;
	}

	public EProbenahmeUeberwachungsergeb(Integer nr, Integer origNr,
			Integer stoffNr, String gruppeDevId, String regelwerkId,
			String variantenId, Integer trennNrOpt, Integer messergebnisTextOpt,
			Float messergebnis, Integer masseinheitenNr) {
		this.nr = nr;
		this.origNr = origNr;
		this.stoffNr = stoffNr;
		this.gruppeDevId = gruppeDevId;
		this.regelwerkId = regelwerkId;
		this.variantenId = variantenId;
		this.trennNrOpt = trennNrOpt;
		this.messergebnisTextOpt = messergebnisTextOpt;
		this.messergebnis = messergebnis;
		this.masseinheitenNr = masseinheitenNr;
	}

	public Integer getNr() {
		return this.nr;
	}

	public void setNr(Integer nr) {
		this.nr = nr;
	}

	@JsonIgnore
	public Integer getOrigNr() {
		return this.origNr;
	}

	@JsonIgnore
	public void setOrigNr(Integer origNr) {
		this.origNr = origNr;
	}

	public Integer getStoffNr() {
		return this.stoffNr;
	}

	public void setStoffNr(Integer stoffNr) {
		this.stoffNr = stoffNr;
	}

	public String getGruppeDevId() {
		return this.gruppeDevId;
	}

	public void setGruppeDevId(String gruppeDevId) {
		this.gruppeDevId = gruppeDevId;
	}

	public String getRegelwerkId() {
		return this.regelwerkId;
	}

	public void setRegelwerkId(String regelwerkId) {
		this.regelwerkId = regelwerkId;
	}

	public String getVariantenId() {
		return this.variantenId;
	}

	public void setVariantenId(String variantenId) {
		this.variantenId = variantenId;
	}

	public Integer getTrennNrOpt() {
		return this.trennNrOpt;
	}

	public void setTrennNrOpt(Integer trennNrOpt) {
		this.trennNrOpt = trennNrOpt;
	}

	public Integer getMessergebnisTextOpt() {
		return this.messergebnisTextOpt;
	}

	public void setMessergebnisTextOpt(Integer messergebnisTextOpt) {
		this.messergebnisTextOpt = messergebnisTextOpt;
	}

	public Float getMessergebnis() {
		return this.messergebnis;
	}

	public void setMessergebnis(Float messergebnis) {
		this.messergebnis = messergebnis;
	}

	public Integer getMasseinheitenNr() {
		return this.masseinheitenNr;
	}

	public void setMasseinheitenNr(Integer masseinheitenNr) {
		this.masseinheitenNr = masseinheitenNr;
	}

    /**
     * Update this EAbwasserbehandlungsanlage with its new values.<br>
     * This is meant to be used after merging!
     * @param copy AtlKlaeranlagen
     */
    private void copy(EProbenahmeUeberwachungsergeb copy) {
    	this.gruppeDevId = copy.getGruppeDevId();
    	this.masseinheitenNr = copy.getMasseinheitenNr();
    	this.messergebnis = copy.getMessergebnis();
    	this.messergebnisTextOpt = copy.getMessergebnisTextOpt();
    	this.nr = copy.getNr();
    	this.regelwerkId = copy.getRegelwerkId();
    	this.stoffNr = copy.getStoffNr();
    	this.variantenId = copy.getVariantenId();
    	this.trennNrOpt = copy.getTrennNrOpt();
    }

    /**
     * Find an {@link EProbenahmeUeberwachungsergeb} instance by its primary key
     * @param id the primary key value
     * @return {@link EProbenahmeUeberwachungsergeb} the requested instance,
     *         if one exists,
     *         <code>null</code> otherwise
     */
    public static EProbenahmeUeberwachungsergeb findById(java.lang.Integer id) {
        return (EProbenahmeUeberwachungsergeb)
            new DatabaseAccess().get(EProbenahmeUeberwachungsergeb.class, id);
    }

    /**
     * Get a list of all {@link EProbenahmeUeberwachungsergeb}
     * @return <code>List&lt;EProbenahmeUeberwachungsergeb&gt;</code>
     *         all {@link EProbenahmeUeberwachungsergeb}
     */
    public static List<EProbenahmeUeberwachungsergeb> getAll() {
        return DatabaseQuery.getAll(new EProbenahmeUeberwachungsergeb());
    }
}
