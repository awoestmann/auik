/**
 * Copyright 2005-2042, Stadt Bielefeld
 *
 * This file is part of AUIK (Anlagen- und Indirekteinleiter-Kataster).
 *
 * AUIK is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 2 of the License, or (at your
 * option) any later version.
 *
 * AUIK is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with AUIK. If not, see <http://www.gnu.org/licenses/>.
 *
 * AUIK has been developed by Stadt Bielefeld and Intevation GmbH.
 */

// Generated by Hibernate Tools 3.3.0.GA

package de.bielefeld.umweltamt.aui.mappings.basis;

import de.bielefeld.umweltamt.aui.mappings.DatabaseClassToString;
import de.bielefeld.umweltamt.aui.mappings.DatabaseSerialVersionUID;

/**
 * A class that represents a row in the BasisStrassen database table.<br>
 * This class is meant to serve as a model and should be copied into the
 * appropriate package and may be customized below the given mark.
 */
public class Orte implements java.io.Serializable
{

	private static final long serialVersionUID =
			DatabaseSerialVersionUID.forOrte;

	/* Primary key, foreign keys (relations) and table columns */
//	private String plz;
	private String ort;

	/** Default constructor */
	public Orte()
	{
		// This place is intentionally left blank.
	}

	/** Full constructor */
	public Orte(String ort)
	{
		// This place is intentionally left blank.
//		setPlz(plz);
		setOrt(ort);
	}

//	public String getPlz()
//	{
//		return this.plz;
//	}
//
//	public void setPlz(String plz)
//	{
//		this.plz = plz;
//	}

	public String getOrt()
	{
		return this.ort;
	}

	public void setOrt(String ort)
	{
		this.ort = ort;
	}

	/**
	 * To implement custom toString methods, jump to not generated code.<br>
	 * Basically we either call on <code>toDebugString</code> for a debug
	 * string, call on <code>toGuiString</code> for a gui representation or do
	 * something completely different.
	 *
	 * @return String
	 */
	@Override
	public String toString()
	{
		return DatabaseClassToString.toStringForClass(this);
	}

	/**
	 * Get a string representation for the gui
	 *
	 * @return String
	 */
	public String toGuiString()
	{

		return String.format(getOrt());
	}

	/**
	 * Get a string representation for debugging
	 *
	 * @return String
	 */
	public String toDebugString()
	{
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getSimpleName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
//		buffer.append("plz").append("='").append(getPlz()).append("' ");
		buffer.append("ort").append("='").append(getOrt()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	/* Custom code goes below here! */

}

